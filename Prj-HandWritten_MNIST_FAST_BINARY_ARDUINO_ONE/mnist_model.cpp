#include "mnist_model.h"
// Prototipos inicialización
quantdense_layer_t init_quant_dense_1_data(void);
batch_normalization_layer_t init_batch_normalization_1_data(void);
dense_layer_t init_dense_1_data(void);


// Variables Globales
quantdense_layer_t quant_dense_1_data;
batch_normalization_layer_t batch_normalization_1_data;
dense_layer_t dense_1_data;


void model_init(){
    quant_dense_1_data = init_quant_dense_1_data();
    batch_normalization_1_data = init_batch_normalization_1_data();
    dense_1_data = init_dense_1_data();
}

void model_predict(data1d_b_t input1, data1d_t * output){
  
    data1d_t output0;

    //*************** LAYER 1 ***************//
    // Layer name: quant_dense_7
    quantdense_layer_b(quant_dense_1_data, input1, &output0);


    //free(&input1);


    //*************** LAYER 2 ***************//
    // Layer name: batch_normalization_23
    batch_normalization1d_layer(batch_normalization_1_data, &output0);
    
    relu_activation(output0.data, 10);

    //*************** LAYER 3 ***************//
    // Layer name: dense_15
    dense_layer(dense_1_data, output0, output);

    softmax_activation(output->data, 10);

}

int model_predict_class(data1d_b_t input, data1d_t * results){
  
   
    model_predict(input, results);
    
        return argmax(*results); 
    //return argmax(data1d_t);

}



// Implementación de funciones de inicialización


    quantdense_layer_t init_quant_dense_1_data(void){
    
        static quant_neuron_t neurons[10];
    
        static  uint8_t weights0[] ={
    23, 253, 28, 191, 14, 13, 219, 0, 7, 168, 160, 1, 224, 126, 2, 0, 63, 196, 0, 63, 
    161, 0, 62, 131, 3, 241, 240, 7, 224, 251, 15, 158, 255, 30, 158, 195, 144, 62, 
    7, 16, 124, 2, 67, 254, 3, 193, 252, 6, 193, 240, 31, 130, 0, 223, 135, 0, 125, 
    192, 98, 255, 192, 43, 254, 224, 15, 254, 46, 223, 235, 80, 32, 99
    };
        static const quant_neuron_t neuron0 = {weights0};
        neurons[0]=neuron0;
    
        static  uint8_t weights1[] ={
    49, 104, 226, 114, 66, 129, 112, 0, 141, 143, 255, 170, 159, 246, 6, 29, 255, 46, 
    28, 190, 175, 25, 184, 127, 13, 64, 63, 16, 63, 7, 0, 255, 3, 129, 255, 3, 128, 
    127, 1, 224, 122, 0, 240, 7, 184, 120, 7, 248, 126, 7, 112, 255, 7, 241, 254, 135, 
    241, 182, 80, 193, 191, 253, 69, 239, 255, 254, 191, 240, 116, 192, 36, 7
    };
        static const quant_neuron_t neuron1 = {weights1};
        neurons[1]=neuron1;
    
        static  uint8_t weights2[] ={
    171, 146, 2, 195, 77, 50, 119, 190, 5, 171, 93, 116, 239, 219, 249, 88, 0, 95, 200, 
    0, 54, 64, 0, 4, 0, 0, 0, 192, 8, 1, 128, 8, 7, 0, 28, 7, 55, 254, 130, 191, 252, 
    167, 150, 188, 47, 23, 255, 110, 212, 191, 255, 199, 175, 254, 19, 135, 254, 76, 
    5, 226, 4, 0, 132, 32, 0, 4, 176, 0, 7, 204, 144, 15
    };
        static const quant_neuron_t neuron2 = {weights2};
        neurons[2]=neuron2;
    
        static  uint8_t weights3[] ={
    141, 186, 182, 67, 255, 250, 3, 255, 254, 63, 251, 135, 99, 234, 2, 255, 254, 1, 
    255, 254, 32, 127, 254, 64, 255, 241, 33, 224, 0, 32, 224, 2, 8, 96, 3, 15, 96, 
    2, 143, 32, 194, 63, 15, 247, 191, 232, 251, 190, 95, 252, 63, 63, 238, 127, 126, 
    51, 190, 219, 212, 156, 26, 40, 4, 127, 254, 4, 127, 255, 3, 175, 255, 219
    };
        static const quant_neuron_t neuron3 = {weights3};
        neurons[3]=neuron3;
    
        static  uint8_t weights4[] ={
    119, 159, 103, 248, 128, 13, 126, 0, 5, 16, 0, 11, 64, 107, 252, 32, 123, 255, 192, 
    127, 254, 224, 127, 15, 113, 240, 7, 103, 224, 7, 207, 224, 1, 255, 192, 64, 159, 
    192, 56, 143, 192, 121, 144, 1, 24, 4, 3, 164, 91, 0, 249, 13, 23, 218, 75, 102, 
    250, 141, 251, 127, 137, 107, 218, 81, 87, 25, 148, 36, 25, 14, 245, 154
    };
        static const quant_neuron_t neuron4 = {weights4};
        neurons[4]=neuron4;
    
        static  uint8_t weights5[] ={
    105, 59, 153, 3, 54, 23, 32, 120, 5, 1, 255, 1, 55, 255, 129, 140, 63, 192, 240, 
    15, 161, 144, 7, 192, 0, 7, 240, 128, 3, 249, 0, 0, 249, 0, 0, 93, 15, 192, 59, 
    95, 160, 251, 191, 129, 16, 255, 199, 134, 223, 133, 231, 249, 183, 47, 123, 85, 
    215, 191, 255, 253, 51, 108, 189, 32, 0, 131, 96, 0, 228, 159, 1, 172
    };
        static const quant_neuron_t neuron5 = {weights5};
        neurons[5]=neuron5;
    
        static  uint8_t weights6[] ={
    128, 224, 211, 223, 241, 250, 207, 251, 250, 58, 131, 252, 149, 129, 220, 184, 2, 
    0, 32, 30, 0, 160, 8, 0, 128, 0, 0, 131, 226, 33, 143, 231, 249, 159, 199, 248, 
    223, 239, 185, 207, 231, 112, 3, 238, 64, 193, 237, 129, 0, 106, 224, 64, 47, 0, 
    192, 60, 1, 128, 0, 8, 65, 0, 248, 15, 243, 244, 111, 253, 227, 162, 33, 144
    };
        static const quant_neuron_t neuron6 = {weights6};
        neurons[6]=neuron6;
    
        static  uint8_t weights7[] ={
    189, 10, 53, 56, 0, 5, 192, 0, 6, 224, 0, 3, 104, 0, 5, 125, 0, 62, 233, 128, 190, 
    47, 227, 252, 99, 227, 255, 147, 231, 134, 211, 226, 2, 159, 243, 130, 93, 227, 
    4, 223, 231, 131, 227, 175, 19, 135, 30, 66, 126, 8, 7, 232, 4, 6, 32, 0, 13, 128, 
    68, 191, 161, 8, 125, 138, 4, 0, 184, 0, 9, 208, 0, 74
    };
        static const quant_neuron_t neuron7 = {weights7};
        neurons[7]=neuron7;
    
        static  uint8_t weights8[] ={
    217, 123, 73, 37, 220, 182, 221, 31, 158, 116, 47, 224, 128, 0, 9, 168, 0, 0, 180, 
    110, 33, 125, 63, 241, 121, 63, 255, 119, 223, 242, 255, 29, 16, 252, 12, 4, 248, 
    4, 161, 176, 1, 161, 50, 0, 129, 210, 17, 2, 240, 24, 2, 193, 124, 7, 33, 24, 3, 
    142, 206, 3, 222, 132, 3, 223, 255, 242, 243, 255, 250, 199, 255, 183
    };
        static const quant_neuron_t neuron8 = {weights8};
        neurons[8]=neuron8;
    
        static  uint8_t weights9[] ={
    180, 112, 162, 79, 255, 249, 87, 255, 250, 64, 78, 190, 0, 7, 143, 32, 32, 159, 
    65, 129, 63, 131, 192, 255, 131, 240, 254, 7, 240, 62, 7, 240, 31, 7, 240, 56, 0, 
    244, 29, 193, 240, 56, 71, 241, 8, 199, 229, 145, 135, 254, 80, 135, 252, 241, 196, 
    254, 81, 192, 126, 128, 129, 62, 128, 64, 0, 25, 64, 0, 4, 56, 0, 7
    };
        static const quant_neuron_t neuron9 = {weights9};
        neurons[9]=neuron9;
    
        quantdense_layer_t layer= {10, neurons};
        return layer;
    }
    
batch_normalization_layer_t init_batch_normalization_1_data(void){

    static const float beta[] ={
    0.8633367419242859, 0.7436633706092834, 0.9475888013839722, 0.5222769975662231, 
    0.2519931495189667, 0.49451130628585815, 0.6056156754493713, 0.3997560143470764, 
    0.6831890940666199, 1.003626823425293
    };
    static const float mov_mean[] ={
    45.854278564453125, 0.9059499502182007, 58.71328353881836, -86.79462432861328, 37.17061996459961, 
    37.106109619140625, 69.8177719116211, 81.64287567138672, -18.90091323852539, 62.64600372314453, 
  
    };
    static const float inv_gamma_dev[] ={
    1.524986/sqrt(642.385864+0.001000), 1.848011/sqrt(777.536316+0.001000), 2.167681/sqrt(993.724243+0.001000), 
    1.760520/sqrt(622.049072+0.001000), 1.736984/sqrt(724.820923+0.001000), 1.983583/sqrt(816.227295+0.001000), 
    1.977175/sqrt(972.431763+0.001000), 2.145494/sqrt(1042.907471+0.001000), 1.917616/sqrt(898.651611+0.001000), 
    1.632004/sqrt(660.760803+0.001000)
    };
   
    static const batch_normalization_layer_t norm = { 10, beta, mov_mean, inv_gamma_dev };
    return norm;
}

dense_layer_t init_dense_1_data(void){

    static neuron_t neurons[10];

    static float weights0[] ={
    -0.7545263767242432, -1.1920915842056274, -1.1089555025100708, 0.260371595621109, 
    0.8169699907302856, 1.229913353919983, -0.4161810576915741, -0.42762652039527893, 
    -0.4752890169620514, 0.8369654417037964
    };
    static const neuron_t neuron0 = {weights0, -0.30620312690734863};
    neurons[0]=neuron0;

    static float weights1[] ={
    0.620201051235199, -0.6130761504173279, 1.1426434516906738, -0.9770577549934387, 
    -1.0392454862594604, -0.5182046890258789, -1.2319546937942505, -1.149776816368103, 
    0.6042075157165527, -0.7330527305603027
    };
    static const neuron_t neuron1 = {weights1, 0.025253545492887497};
    neurons[1]=neuron1;

    static float weights2[] ={
    0.21014782786369324, -0.42866700887680054, 0.5929908752441406, 1.17274010181427, 
    -0.747865617275238, 0.9585232138633728, -0.8564382195472717, -0.17555539309978485, 
    -0.9397354125976562, -0.24055635929107666
    };
    static const neuron_t neuron2 = {weights2, -0.15013547241687775};
    neurons[2]=neuron2;

    static float weights3[] ={
    -0.46575728058815, 1.1052652597427368, -0.11479596793651581, 0.13093838095664978, 
    -0.5582523941993713, 0.6737620234489441, -0.904721736907959, -0.4880613684654236, 
    -0.010437678545713425, -0.6275743246078491
    };
    static const neuron_t neuron3 = {weights3, 0.494578093290329};
    neurons[3]=neuron3;

    static float weights4[] ={
    -0.4673894941806793, -0.2987321615219116, 0.23981894552707672, -0.44712406396865845, 
    -0.3694372773170471, -0.5188938975334167, 0.622898280620575, 1.2190876007080078, 
    -1.1240270137786865, -0.2653181850910187
    };
    static const neuron_t neuron4 = {weights4, -0.4734286665916443};
    neurons[4]=neuron4;

    static float weights5[] ={
    -0.7004729509353638, 0.3976823389530182, 0.17153356969356537, -0.3865740895271301, 
    0.9835041761398315, -0.5036521553993225, -1.0243009328842163, 0.3007190227508545, 
    -0.10121841728687286, 0.7265569567680359
    };
    static const neuron_t neuron5 = {weights5, -0.06987614184617996};
    neurons[5]=neuron5;

    static float weights6[] ={
    -0.8877655267715454, -0.8674604892730713, 0.5743020176887512, 0.47560691833496094, 
    -0.3104075491428375, -0.3551476299762726, 0.8930719494819641, -1.3449478149414062, 
    -0.8053516745567322, 0.9093528389930725
    };
    static const neuron_t neuron6 = {weights6, -0.4063990116119385};
    neurons[6]=neuron6;

    static float weights7[] ={
    -0.5337326526641846, -0.8616924285888672, -1.2326693534851074, 0.6563444137573242, 
    -0.011310386471450329, -0.5470471382141113, -0.12434298545122147, 0.3412676155567169, 
    1.0910226106643677, -1.1451103687286377
    };
    static const neuron_t neuron7 = {weights7, 0.42139238119125366};
    neurons[7]=neuron7;

    static float weights8[] ={
    1.0395220518112183, 0.3479677438735962, -0.2924903333187103, -0.2844682037830353, 
    -0.7808299660682678, -0.27977535128593445, -0.7730158567428589, -0.34037867188453674, 
    -0.7155069708824158, 0.8983400464057922
    };
    static const neuron_t neuron8 = {weights8, 0.4845777750015259};
    neurons[8]=neuron8;

    static float weights9[] ={
    0.6440325379371643, 0.15730728209018707, -1.0557348728179932, -0.23902490735054016, 
    -0.04377797991037369, -0.04494932293891907, 0.7697288990020752, 0.4254516363143921, 
    -0.051717836409807205, -1.2498914003372192
    };
    static const neuron_t neuron9 = {weights9, -0.2382015883922577};
    neurons[9]=neuron9;

    dense_layer_t layer= {10, neurons};
    return layer;
}
